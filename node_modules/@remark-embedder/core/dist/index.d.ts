import type { Node } from 'unist';
declare type GottenHTML = string | null;
declare type TransformerConfig<Type = unknown> = Type;
declare type Transformer<ConfigType = unknown> = {
    getHTML: (url: string, config?: TransformerConfig<ConfigType>) => Promise<GottenHTML> | GottenHTML;
    shouldTransform: (url: string) => Promise<boolean> | boolean;
    name: string;
};
declare type RemarkEmbedderOptions = {
    cache?: Map<string, GottenHTML> | {
        get(key: string): Promise<GottenHTML>;
        set(key: string, value: GottenHTML): Promise<void>;
        [key: string]: unknown;
    };
    transformers: Array<[Transformer<any>, TransformerConfig] | Transformer<any>>;
};
declare function remarkEmbedder({ transformers, cache }: RemarkEmbedderOptions): (tree: Node) => Promise<Node>;
export default remarkEmbedder;
export type { Transformer, RemarkEmbedderOptions };
